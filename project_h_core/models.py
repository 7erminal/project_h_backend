from django.db import models
from django.contrib.auth.models import User
from datetime import date

# Create your models here.
class IDTypes(models.Model):
	IDType_id = models.AutoField(primary_key=True)
	IDType_name = models.CharField(max_length=40)
	active = models.SmallIntegerField(null=True, blank=True)

class Customers(models.Model):
	customer_id = models.AutoField(primary_key=True)
	user = models.OneToOneField(User, on_delete=models.CASCADE)
	customer_number = models.CharField(max_length=50, unique=True)
	dob = models.DateField(default=date.today)
	active = models.SmallIntegerField(null=True, blank=True)
	is_verified = models.SmallIntegerField(null=True, blank=True)
	ID_type = models.ForeignKey(IDTypes, null=True, blank=True, on_delete=models.CASCADE, related_name='customer_id_type')
	ID_number = models.IntegerField(null=True)
	language_id = models.IntegerField(null=True)
	profession = models.CharField(max_length=50, null=True, blank=True)
	mobile_number = models.CharField(max_length=50, null=True, unique=True)
	gender = models.CharField(max_length=6, default='n')
	picture = models.ImageField(upload_to='customer_images', null=True, blank=True)
	id_image = models.ImageField(upload_to='id_images', null=True, blank=True)
	other_names = models.CharField(max_length=80, null=True, blank=True)
	address = models.CharField(max_length=80, null=True, blank=True)
	delivery_location = models.CharField(max_length=100, null=True, blank=True)
	location = models.CharField(max_length=100, null=True, blank=True)
	nationality = models.IntegerField(null=True)
	dateTermsAndConditions = models.DateTimeField(null=True, blank=True)
	datePrivacyPolicy = models.DateTimeField(null=True, blank=True)
	is_host = models.SmallIntegerField(default=0)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class HostDetails(models.Model):
	host_details_id = models.AutoField(primary_key=True)
	host_name = models.CharField(max_length=50, null=True)
	customer = models.OneToOneField(Customers, on_delete=models.CASCADE, default=1)
	location_cordinates = models.CharField(max_length=80, null=True, blank=True)
	office_address = models.CharField(max_length=80, null=True, blank=True)
	service_coverage_zone = models.CharField(max_length=80, null=True, blank=True)
	official_certifications = models.CharField(max_length=150, null=True, blank=True)
	number_of_years_practice_speciality = models.CharField(max_length=50, null=True, blank=True)
	number_of_years_experience = models.CharField(max_length=50, null=True, blank=True)
	specializations = models.CharField(max_length=255, null=True, blank=True)
	referrals = models.CharField(max_length=255, null=True, blank=True)
	specializations = models.CharField(max_length=255, null=True, blank=True)
	audio_video = models.FileField(upload_to='media', null=True, blank=True)
	languages_spoken = models.CharField(max_length=255, null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class HostReferrals(models.Model):
	host_referral_id = models.AutoField(primary_key=True)
	host_details = models.ForeignKey(HostDetails, on_delete=models.CASCADE, related_name='host_details_referral')
	referral = models.CharField(max_length=50, null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Services(models.Model):
	service_id = models.AutoField(primary_key=True)
	service_name = models.CharField(max_length=50, null=True)
	description = models.TextField(null=True, blank=True)
	service_icon = models.CharField(max_length=80, null=True, blank=True)
	has_form = models.BooleanField(default=0)
	active = models.SmallIntegerField(null=True, blank=True)
	display_type = models.CharField(max_length=50, null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Services_sub_categories(models.Model):
	service_sub_category_id = models.AutoField(primary_key=True)
	service_id = models.ForeignKey(Services, null=True, blank=True, on_delete=models.CASCADE, related_name='service_sub_service')
	label = models.CharField(max_length=50, null=True, blank=True)
	option_for = models.IntegerField(null=True, blank=True, default=0)
	service_sub_category = models.CharField(max_length=50, null=True)
	service_sub_category_fields = models.TextField(null=True, blank=True)
	service_sub_category_icon = models.CharField(max_length=80, null=True, blank=True)
	description = models.CharField(max_length=255, null=True, blank=True)
	display_type = models.CharField(max_length=50, null=True, blank=True)
	active = models.SmallIntegerField(null=True, blank=True)
	has_subs = models.BooleanField(default=0)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Services_sub_category_fields(models.Model):
	service_sub_category_field_id = models.AutoField(primary_key=True)
	label = models.CharField(max_length=50, null=True, blank=True)
	service_sub_category = models.ForeignKey(Services_sub_categories, null=True, blank=True, on_delete=models.CASCADE, related_name='services_sub_category_field')
	field1 = models.CharField(max_length=50, null=True)
	display_type = models.CharField(max_length=50, null=True, blank=True)
	subs_display_type = models.CharField(max_length=50, null=True, blank=True)
	has_subs = models.BooleanField(default=0)
	field_options = models.CharField(max_length=255, null=True, blank=True)
	description = models.CharField(max_length=255, null=True, blank=True)
	active = models.SmallIntegerField(null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Hosted_service(models.Model):
	hosted_service_id = models.AutoField(primary_key=True)
	service = models.ForeignKey(Services, null=True, blank=True, on_delete=models.CASCADE, related_name='hosted_service_service')
	service_name =  models.CharField(max_length=50)
	service_sub = models.CharField(max_length=50, null=True, blank=True)
	service_sub_selected_fields = models.CharField(max_length=255, null=True, blank=True)
	description = models.TextField(null=True, blank=True)
	location = models.CharField(max_length=100, null=True, blank=True)
	location_cordinates = models.CharField(max_length=100, null=True, blank=True)
	process = models.TextField(null=True, blank=True)
	user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='hosted_service_user_id')
	active = models.SmallIntegerField(null=True, blank=True)
	expected_duration = models.CharField(max_length=20, null=True, blank=True)
	price = models.FloatField(default=0)
	part_payment_allowed = models.SmallIntegerField(null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Service_images(models.Model):
	service_image_id = models.AutoField(primary_key=True)
	hosted_service = models.ForeignKey(Hosted_service, on_delete=models.CASCADE, related_name='hosted_service_images')
	image = models.ImageField(upload_to='images')
	description = models.TextField(null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Service_reviews(models.Model):
	service_review_id = models.AutoField(primary_key=True)
	hosted_service = models.ForeignKey(Hosted_service, on_delete=models.CASCADE, related_name='hosted_service_reviews')
	review_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='service_review_user_id')
	review = models.TextField()
	active = models.IntegerField(null=True, blank=True, default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Countries(models.Model):
	country_id = models.AutoField(primary_key=True)
	country_name = models.CharField(max_length=50, unique=True)
	can_onboard = models.SmallIntegerField(null=True, blank=True)
	active = models.SmallIntegerField(null=True, blank=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class Payment_methods(models.Model):
	payment_method_id = models.AutoField(primary_key=True)
	payment_method_name = models.CharField(max_length=100)
	active = models.BooleanField(default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

class Payments(models.Model):
	payment_from = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_for_user_id')
	payment_to = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_to_user_id')
	payment_for = models.ForeignKey(Hosted_service, on_delete=models.CASCADE, related_name='payments_service')
	amount = models.CharField(max_length=12, default=0)
	amount_paid = models.CharField(max_length=12)
	payment_status = models.CharField(max_length=10, default='not_paid')
	active = models.BooleanField(default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

class One_time_pin(models.Model):
	mobile_number = models.CharField(max_length=25)
	code = models.CharField(max_length=10)
	processed = models.SmallIntegerField(default=0)
	status = models.IntegerField(null=True, blank=True)
	otp_type = models.CharField(max_length=25, default="login")
	active = models.BooleanField(default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)


class User_payment_methods(models.Model):
	user_id = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_method_user_id')
	payment_method = models.ForeignKey(Payment_methods, on_delete=models.CASCADE, related_name='user_payment_method')
	payment_method_table_key = models.IntegerField(null=True, blank=True)
	number = models.CharField(max_length=100, null=True, blank=True)
	expired = models.DateTimeField(auto_now=True)
	active = models.BooleanField(default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

class Cards(models.Model):
	card_id = models.AutoField(primary_key=True)
	user_id = models.ForeignKey(User, on_delete=models.CASCADE, related_name='cards_user_id')
	card_number = models.CharField(max_length=100, null=True, blank=True)
	expiry_date = models.CharField(max_length=100, null=True, blank=True)
	active = models.BooleanField(default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

class Momo(models.Model):
	momo_id = models.AutoField(primary_key=True)
	user_id = models.ForeignKey(User, on_delete=models.CASCADE, related_name='momo_user_id')
	number = models.CharField(max_length=30)
	verified = models.BooleanField(default=1)
	active=models.BooleanField(default=1)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

class Requests(models.Model):
	request_id = models.AutoField(primary_key=True)
	host_service = models.ForeignKey(Hosted_service, on_delete=models.CASCADE, related_name='hosted_service_request')
	requester = models.ForeignKey(User, on_delete=models.CASCADE, related_name='requester_request')
	choice = models.CharField(max_length=100, null=True, blank=True)
	preferences = models.CharField(max_length=255, null=True, blank=True)
	active = models.SmallIntegerField(null=True, blank=True)
	host = models.ForeignKey(User, on_delete=models.CASCADE, related_name='host_request')
	charge = models.FloatField(null=True, blank=True)
	payment_method = models.ForeignKey(Payment_methods, on_delete=models.CASCADE, related_name='payment_method_request', null=True)
	payment_option = models.ForeignKey(User_payment_methods, on_delete=models.CASCADE, related_name='user_payment_method_request', null=True)
	created_by = models.IntegerField(null=True, blank=True)
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class RequestNotice(models.Model):
	request_notice_id = models.AutoField(primary_key=True)
	preferences = models.CharField(max_length=255, null=True, blank=True)
	category = models.ForeignKey(Services, on_delete=models.CASCADE, related_name='request_notice_category')
	key_words = models.CharField(max_length=255, null=True, blank=True)
	location = models.CharField(max_length=100, null=True, blank=True)
	view_count = models.IntegerField(default=0)
	served=models.IntegerField(default=0)
	active=models.BooleanField(default=1)
	created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='request_notice_user')
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class RequestResponses(models.Model):
	request_response_id = models.AutoField(primary_key=True)
	request = models.ForeignKey(Requests, on_delete=models.CASCADE, related_name='response_request')
	response = models.TextField(null=True, blank=True)
	accepted = models.SmallIntegerField(default=2)
	is_first_response = models.BooleanField(default=0)
	active=models.BooleanField(default=1)
	created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='request_response_user')
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

class RequestNoticeResponses(models.Model):
	request_response_id = models.AutoField(primary_key=True)
	request_notice = models.ForeignKey(RequestNotice, on_delete=models.CASCADE, related_name='response_request_notice')
	accepted = models.SmallIntegerField(default=2)
	response = models.TextField(null=True, blank=True)
	is_first_response = models.BooleanField(default=0)
	view_count = models.IntegerField(default=0)
	active=models.BooleanField(default=1)
	created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='request_notice_response_user')
	updated_by = models.IntegerField(null=True, blank=True)
	created_at = models.DateTimeField(auto_now_add=True, blank=True)
	updated_at = models.DateTimeField(auto_now=True, blank=True)

